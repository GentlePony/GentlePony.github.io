<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Hexo</title>
    <link href="http://example.com" />
    <updated>2020-09-03T16:44:20.075Z</updated>
    <entry>
        <id>http://example.com/2020/09/04/kotlin%E5%8D%8F%E7%A8%8B/</id>
        <title></title>
        <link rel="alternate" href="http://example.com/2020/09/04/kotlin%E5%8D%8F%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;kotlin协程&#34;&gt;&lt;a href=&#34;#kotlin协程&#34; class=&#34;headerlink&#34; title=&#34;kotlin协程&#34;&gt;&lt;/a&gt;kotlin协程&lt;/h1&gt;&lt;h3 id=&#34;一、协程的优势&#34;&gt;&lt;a href=&#34;#一、协程的优势&#34; class=&#34;headerlink&#34; title=&#34;一、协程的优势&#34;&gt;&lt;/a&gt;一、协程的优势&lt;/h3&gt;&lt;p&gt;​            1、&lt;strong&gt;很容易切换到子线程&lt;/strong&gt;。我们可以用很多方法来让操作远离主线程，AsyncTask、Loaders、ExecutorServices……甚至有开发者用到了 RxJava。但协程可以让开发者只需要一行代码就完成这个工作，而且没有累人的回调处理。&lt;/p&gt;
&lt;p&gt;​            2、&lt;strong&gt;协程是挂起式的而不是阻塞式的&lt;/strong&gt; 挂起函数挂起协程时，不会阻塞协程所在的线程，它会将自己先从线程中脱离出去，让线程去干其他的事情。挂起函数执行完成后会自动恢复协程，后面的代码才会继续执行。但是挂起函数只能在协程中或其他挂起函数中调用。&lt;/p&gt;
&lt;p&gt;​            3、&lt;strong&gt;编译器会检测调用&lt;/strong&gt; 当一个挂起函数被调用时，编译器会检测该函数的调用环境是否是一个协程上下文的环境&lt;/p&gt;
&lt;p&gt;​            4、&lt;strong&gt;结构化并发&lt;/strong&gt; 想象一种情况，我们进一个页面需要，连续请求几个接口，当其中一个网络请求出错时或者此时退出页面，我们希望关闭其他并行的网络请求。如果用Rx实现，则需要使用zip操作符进行合并请求，然后持有zip返回的对象，在destory的时销毁。然而协程只需要你取消持有的最顶层上下文，那么其所有的字上下文就都会取消。&lt;/p&gt;
&lt;h4 id=&#34;二、协程的基本组成&#34;&gt;&lt;a href=&#34;#二、协程的基本组成&#34; class=&#34;headerlink&#34; title=&#34;二、协程的基本组成&#34;&gt;&lt;/a&gt;二、协程的基本组成&lt;/h4&gt;&lt;p&gt;​            一个协程基本由三个部分组成&lt;code&gt;CoroutineContext&lt;/code&gt;（协程上下文）、&lt;code&gt; CoroutineStart &lt;/code&gt;（协程启动模式）、&lt;code&gt;block代码块&lt;/code&gt;(协程体即代码块)。&lt;/p&gt;
&lt;p&gt;​        &lt;strong&gt;1、CoroutineContext（协程上下文）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​            协程上下文是用来指定协程代码块在哪个线程中执行，&lt;code&gt;kotlin&lt;/code&gt;提供了几个默认的协程上下文，分别是&lt;code&gt;Default&lt;/code&gt;、&lt;code&gt;Main&lt;/code&gt;、&lt;code&gt;IO&lt;/code&gt;、&lt;code&gt;Unconfined&lt;/code&gt; 、&lt;code&gt;EmptyCoroutineContext&lt;/code&gt;、&lt;code&gt;自定义调度器&lt;/code&gt;, 并针对&lt;code&gt;jvm&lt;/code&gt;, &lt;code&gt;kotlin&lt;/code&gt;提供了一个特有的&lt;code&gt;IO&lt;/code&gt;调度器&lt;/p&gt;
&lt;p&gt;​            先说说&lt;code&gt;Default&lt;/code&gt;、&lt;code&gt;IO&lt;/code&gt;、&lt;code&gt;Main&lt;/code&gt;、``Unconfined`这四个属于Dispatchers&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;start:&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//It is backed by a shared pool of threads on JVM.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    launch(Dispatchers.Default) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;default:&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//与default共享一个线程池，所以有些时候会是同一个线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    launch(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;io:&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//切换到主线程即UI线程,看似是切换，实际上是讲代码快post到了主线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    launch(Dispatchers.Main) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;main:&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//保持之前的线程不变，但如果之前的线程已经取消或者死亡，则会自己开启一个新的线程来执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    launch(Dispatchers.Unconfined) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delay(&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;unconfined:&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;执行&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;figcaption&gt;&lt;span&gt;D/taosi: start:DefaultDispatcher-worker-1&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;12447-12516&amp;#x2F;? D&amp;#x2F;taosi: default:DefaultDispatcher-worker-3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12447-12516&amp;#x2F;? D&amp;#x2F;taosi: io:DefaultDispatcher-worker-3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12447-12514&amp;#x2F;? D&amp;#x2F;taosi: unconfined:DefaultDispatcher-worker-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12447-12514&amp;#x2F;? D&amp;#x2F;taosi: 执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12447-12447&amp;#x2F;? D&amp;#x2F;taosi: main:main&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​        &lt;code&gt;EmptyCoroutineContext&lt;/code&gt;:空的上下文，当存在有父协程时，使用该上下文启动一个子协程则会继承父协程的上下文，即在父协程的线程上执行代码。若不在父协程，则会在default的线程池中获取编号为一的线程。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     CoroutineScope(EmptyCoroutineContext).launch &amp;#123;
            Log.d(&amp;quot;taosi&amp;quot;, Thread.currentThread().name)
            launch(EmptyCoroutineContext) &amp;#123;
                delay(300)
                Log.d(&amp;quot;taosi&amp;quot;, Thread.currentThread().name)
            &amp;#125;
            delay(10000)
        &amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​    结果:&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;16675&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;16714&lt;/span&gt;/com.example.coroutinedemo D/taosi: DefaultDispatcher-worker-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;16675&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;16714&lt;/span&gt;/com.example.coroutinedemo D/taosi: DefaultDispatcher-worker-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​    当父协程的上下文不存在时（即父协程已经执行完它的任务），若子协程的上下文指定为&lt;code&gt;EmptyCoroutineContext&lt;/code&gt;，那么子协程是不会继承父协程的上下文的&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(EmptyCoroutineContext).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, Thread.currentThread().id.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; job = launch(EmptyCoroutineContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delay(&lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, Thread.currentThread().id.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果:&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;00&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;27.152&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;18788&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;18832&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;35633&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;00&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;29.160&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;18788&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;18833&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;35634&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​    自定义的协程上下文：有些时候你不想使用他创建的线程池的协程时采用这种方式或者你想两端段代码在同一个线程执行 ，可以使用&lt;code&gt;kotlin&lt;/code&gt;自带&lt;code&gt;newSingleThreadContext&lt;/code&gt;方法或者使用&lt;code&gt;ExecutorService&lt;/code&gt;的扩展方法&lt;code&gt;asCoroutineDispatcher&lt;/code&gt;创建一个&lt;code&gt;Dispatcher&lt;/code&gt;。但这样创建的线程需要手动的close，否则该线程就永远不会终止。&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; context1 = newSingleThreadContext(&lt;span class=&#34;string&#34;&gt;&amp;quot;custom_Thread1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; context2 = Executors.newSingleThreadExecutor&amp;#123;r-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Thread(r,&lt;span class=&#34;string&#34;&gt;&amp;quot;custom_Thread2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;.asCoroutineDispatcher()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;launch(context1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;customThread1:&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;launch(context2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;customThread2:&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;13562&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13605&lt;/span&gt;/com.example.coroutinedemo D/taosi: customThread1:custom_Thread1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;13562&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13607&lt;/span&gt;/com.example.coroutinedemo D/taosi: customThread2:custom_Thread2	&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2、 CoroutineStart（协程启动模式）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​        &lt;code&gt;*DEFAULT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​            这个模式代表一旦调用launch会自动执行代码块的代码，不需要手动调用，在调用lauch的函数时的默认值就是这个，列如以上代码都是没有指定启动模式&lt;/p&gt;
&lt;p&gt;​        &lt;code&gt;LAZY&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;default模式代码块开始&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    launch(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;startModel::default&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lazy模式代码块开始&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; job = launch(Dispatchers.IO, CoroutineStart.LAZY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;startModel::lazy&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    delay(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    job.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果:&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;figcaption&gt;&lt;span&gt;21:20:57.562 16327-16368/? D/taosi: default模式代码块开始&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2020-06-14 21:20:57.562 16327-16368&amp;#x2F;? D&amp;#x2F;taosi: lazy模式代码块开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2020-06-14 21:20:57.562 16327-16370&amp;#x2F;? D&amp;#x2F;taosi: startModel::default&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2020-06-14 21:20:58.568 16327-16370&amp;#x2F;com.example.coroutinedemo D&amp;#x2F;taosi: startModel::lazy		&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;CoroutineStart.LAZY&lt;/code&gt;启动模式对于&lt;code&gt;Job&lt;/code&gt;一定要手动调用&lt;code&gt;join&lt;/code&gt;或&lt;code&gt;start&lt;/code&gt;等方法.对于&lt;code&gt;Differed&lt;/code&gt;一定要手动调用&lt;code&gt;await()&lt;/code&gt;，否者协程体不会执行。&lt;/p&gt;
&lt;p&gt;​        &lt;code&gt;ATOMIC&lt;/code&gt;:（实验性质）&lt;/p&gt;
&lt;p&gt;​            这个模式我暂时还没用过&lt;/p&gt;
&lt;p&gt;​        &lt;code&gt;UNDISPATCHED&lt;/code&gt;（实验性质的参数）&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;UNDISPATCHED模式开始::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           launch(context1,CoroutineStart.UNDISPATCHED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;startModel::UNDISPATCHED::1::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               delay(&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;startModel::UNDISPATCHED::2::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           delay(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           job.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;46.233&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25658&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;25790&lt;/span&gt;/com.example.coroutinedemo D/taosi: UNDISPATCHED模式代码块开始::DefaultDispatcher-worker-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;46.235&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25658&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;25790&lt;/span&gt;/com.example.coroutinedemo D/taosi: startModel::UNDISPATCHED::&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;::DefaultDispatcher-worker-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;46.540&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25658&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;25794&lt;/span&gt;/com.example.coroutinedemo D/taosi: startModel::UNDISPATCHED::&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;::custom_Thread1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​             在于到第一个挂起函数之前，当前的协程体会在父协程上下文执行代码，第一个挂起函数之后，代码就会由当前协程指定的调度器执行。&lt;/p&gt;
&lt;h4 id=&#34;三、协程的构建器&#34;&gt;&lt;a href=&#34;#三、协程的构建器&#34; class=&#34;headerlink&#34; title=&#34;三、协程的构建器&#34;&gt;&lt;/a&gt;三、协程的构建器&lt;/h4&gt;&lt;p&gt;​        &lt;code&gt;CoroutineScope.launch &amp;#123;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;GlobalScope::代码块开始::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            GlobalScope.launch(EmptyCoroutineContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;GlobalScope::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;02&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;21.289&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2741&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;2800&lt;/span&gt;/? D/taosi: GlobalScope::代码块开始::DefaultDispatcher-worker-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;02&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;21.290&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2741&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;2800&lt;/span&gt;/? D/taosi: 父协程开始执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;02&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;21.290&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2741&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;2802&lt;/span&gt;/? D/taosi: GlobalScope::DefaultDispatcher-worker-&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​    &lt;code&gt;CoroutineScope.launch &amp;#123;&amp;#125;&lt;/code&gt; 是最常用的 Coroutine builders，不阻塞当前线程，在后台创建一个新协程，也可以指定协程调度器。GlobalScope.launc()也就是这种方式构建的，不过它指定自身的上下文为一个特殊的上下文(EmptyCoroutineContext),这种方式启动的协程不会阻塞父协程。&lt;/p&gt;
&lt;p&gt;​        &lt;code&gt;runBlocking &amp;#123;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;GlobalScope::代码块开始::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    GlobalScope.launch(EmptyCoroutineContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;GlobalScope::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;runBlocking::开始阻塞线程&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    runBlocking(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delay(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;runBlocking::执行结束&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;父协程开始执行&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;28.810&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2131&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;2208&lt;/span&gt;/? D/taosi: GlobalScope::代码块开始::DefaultDispatcher-worker-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;28.811&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2131&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;2208&lt;/span&gt;/? D/taosi: runBlocking::开始阻塞线程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;28.811&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2131&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;2252&lt;/span&gt;/? D/taosi: GlobalScope::DefaultDispatcher-worker-&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;29.817&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2131&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;2252&lt;/span&gt;/com.example.coroutinedemo D/taosi: runBlocking::执行结束&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;29.817&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2131&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;2208&lt;/span&gt;/com.example.coroutinedemo D/taosi: 父协程开始执行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;runBlocking &amp;#123;&amp;#125;&lt;/code&gt;是创建一个新的协程同时阻塞当前线程，直到协程结束。这个不应该在协程中使用，主要是为&lt;code&gt;main&lt;/code&gt;函数和测试设计的。&lt;/p&gt;
&lt;p&gt;​    这两种协程的构建方式，一般都是用来从无到有的构建，也就是说在不在协程作用域的情况下我们才会调用这两种方式进行协程的构建。&lt;/p&gt;
&lt;h4 id=&#34;四、协程的作用域&#34;&gt;&lt;a href=&#34;#四、协程的作用域&#34; class=&#34;headerlink&#34; title=&#34;四、协程的作用域&#34;&gt;&lt;/a&gt;四、协程的作用域&lt;/h4&gt;&lt;p&gt;&lt;code&gt;CoroutineScope和coroutineScope&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch(CoroutineExceptionHandler &amp;#123; _, e -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;variable&#34;&gt;$e&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, Thread.currentThread().name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          launch(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              coroutineScope &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; list = emptyList&amp;lt;&lt;span class=&#34;built_in&#34;&gt;Long&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  list[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, Thread.currentThread().name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          launch(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              coroutineScope &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  delay(&lt;span class=&#34;number&#34;&gt;1200&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;47&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;39.722&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10218&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;10261&lt;/span&gt;/? D/taosi: DefaultDispatcher-worker-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;47&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;39.732&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10218&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;10262&lt;/span&gt;/? D/taosi: java.lang.IndexOutOfBoundsException: Empty list doesn&lt;span class=&#34;string&#34;&gt;&amp;#x27;t contain element at index 0.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;coroutineScope&lt;/code&gt; 启动的协程会继承父协程的作用域和上下文，其内部的取消操作是双向传播的，子协程未捕获的异常也会向上传递给父协程,但如果你在父协程外面使用try()catch{}是无法捕获异常的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;supervisorScope和SupervisorJob&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(context1).launch(CoroutineExceptionHandler &amp;#123; _, e -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;e&amp;#125;&lt;/span&gt;1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           supervisorScope() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               launch(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; list = emptyList&amp;lt;&lt;span class=&#34;built_in&#34;&gt;Long&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   list[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, Thread.currentThread().name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           coroutineScope &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               delay(&lt;span class=&#34;number&#34;&gt;1200&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;45.529&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;9543&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9599&lt;/span&gt;/com.example.coroutinedemo D/taosi: custom_Thread1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;45.553&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;9543&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9600&lt;/span&gt;/com.example.coroutinedemo D/taosi: java.lang.IndexOutOfBoundsException: Empty list doesn&lt;span class=&#34;string&#34;&gt;&amp;#x27;t contain element at index 0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;2020-06-14 23:45:46.756 9543-9599/com.example.coroutinedemo D/taosi: dd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;supervisorScope&lt;/code&gt; 启动的协程也会继承父协程的上下文，但不会继承作用域，它只会单向的传播并且当作业自身执行失败的时候将所有子作业全部取消。作业自身也会在所有的子作业执行结束前等待&lt;/p&gt;
&lt;p&gt;​    一定要区分作用域和协程上下文的区别，协程上下文只是决定当前代码块执行的线程，而作用域是用来决父协程与子携程的异常处理相互关系&lt;/p&gt;
&lt;h4 id=&#34;五、在父协程中创建子协程&#34;&gt;&lt;a href=&#34;#五、在父协程中创建子协程&#34; class=&#34;headerlink&#34; title=&#34;五、在父协程中创建子协程&#34;&gt;&lt;/a&gt;五、在父协程中创建子协程&lt;/h4&gt;&lt;p&gt;​    &lt;code&gt;lauch():Job&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(EmptyCoroutineContext).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&amp;quot;taosi&amp;quot;, Thread.currentThread().name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    launch(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delay(300)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&amp;quot;taosi&amp;quot;, Thread.currentThread().name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    delay(10000)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​        直接在父协程中创建一个子协程，运行的线程根据上下文决定。该方法返回一个Job对象，可以对该对象进行控制决定协程什么时候开始执行，什么时候结束，并不会自动挂起父协程。&lt;/p&gt;
&lt;p&gt;​    &lt;code&gt;withContext():T&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​        该函数返回一个泛型，这个泛型是由代码块中的返回的类型决定的，适合用于有返回值得异步调用，但又不需要控制子协程的启动与取消。不过需要注意的是，如果使用它开启一个子线程，它会自动挂起父协程。&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, Thread.currentThread().id.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; withContextValue = withContext(Dispatchers.Default) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; test = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   delay(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, Thread.currentThread().id.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   test = &lt;span class=&#34;string&#34;&gt;&amp;quot;withContext&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;@withContext&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;withCOntext&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, withContextValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;57&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;27.556&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23244&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;23287&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;35799&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;57&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;28.597&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23244&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;23287&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;35799&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;57&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;28.598&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23244&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;23287&lt;/span&gt;/com.example.coroutinedemo D/taosi: withCOntext&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;57&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;28.599&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23244&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;23287&lt;/span&gt;/com.example.coroutinedemo D/taosi: test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​    需要注意的是，由于Dispatchers.IO与Default共用的一个线程池，所以当父协程使用的上下文是Dispatchers.Io或default时，withContext产生的子协程并不会造成实际意义上的切换。若想真正意义上的再次切换一次线程可以像如下一样调用。&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, Thread.currentThread().id.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; withContextValue = withContext(Dispatchers.Default) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; test = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; job = launch(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 delay(&lt;span class=&#34;number&#34;&gt;3000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, Thread.currentThread().id.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 test = &lt;span class=&#34;string&#34;&gt;&amp;quot;withContext&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             job.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;@withContext&lt;/span&gt; test&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, withContextValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;01&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;02&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;37.399&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23580&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;23631&lt;/span&gt;/? D/taosi: &lt;span class=&#34;number&#34;&gt;35810&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;01&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;02&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;38.439&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23580&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;23632&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;35811&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;01&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;02&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;38.441&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23580&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;23632&lt;/span&gt;/com.example.coroutinedemo D/taosi: withCOntext&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​    &lt;code&gt;async&amp;#123;&amp;#125;:Deffered&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​        这个函数通常用于并发请求的操作，&lt;code&gt;Deffered&lt;/code&gt;接口继承自Job接口，它提供一个await()函数用于获取异步返回的值，需要注意的是await()是一个挂起函数，当你调用await()时，它会主动的将父协程挂起，等待子协程的返回值，所以如果你想真正意义上的实现两个协程并行工作，应该像如下调用：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; deffer1 = async(start = CoroutineStart.LAZY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delay(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;deffer1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; deffer2 = async(start = CoroutineStart.LAZY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delay(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;deffer2&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    deffer1.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    deffer2.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;deffer1.await()&amp;#125;&lt;/span&gt;,&lt;span class=&#34;subst&#34;&gt;$&amp;#123;deffer2.await()&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果:&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;21.773&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23984&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;24042&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;37013&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;22.281&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23984&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;24047&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;37018&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;22.281&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23984&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;24044&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;37015&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;22.282&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23984&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;24047&lt;/span&gt;/com.example.coroutinedemo D/taosi: deffer1,deffer12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但还有注意的一点，async是一定会开启一个新线程哪怕是使用&lt;code&gt;EmptyCoroutineContext&lt;/code&gt;它依然会重新建立一个新的上下文而不会继承父协程的上下文。&lt;/p&gt;
&lt;h4 id=&#34;六、取消协程&#34;&gt;&lt;a href=&#34;#六、取消协程&#34; class=&#34;headerlink&#34; title=&#34;六、取消协程&#34;&gt;&lt;/a&gt;六、取消协程&lt;/h4&gt;&lt;p&gt;​    先看看以下代码：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; job = launch(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    delay(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    job.cancel()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;04.673&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;19452&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;19537&lt;/span&gt;/com.example.coroutinedemo D/taosi: cancel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;04.675&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;19452&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;19537&lt;/span&gt;/com.example.coroutinedemo D/taosi: cancel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;04.706&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;19452&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;19537&lt;/span&gt;/com.example.coroutinedemo D/taosi: cancel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到我们启动了一个子协程，然后又在100ms后取消了这个子协程，但这个子协程的代码块并没有停止执行，具体原因，可以先看下面代码再做分析：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;cancelCoroutine::1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CoroutineScope(Dispatchers.IO).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; job = launch(Dispatchers.IO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    delay(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (e:Exception)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               		Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;error:&lt;span class=&#34;variable&#34;&gt;$e&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;cancel:2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    delay(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    job.cancel()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;05.402&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;24104&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;24168&lt;/span&gt;/com.example.coroutinedemo D/taosi: cancel:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;05.402&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;24104&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;24168&lt;/span&gt;/com.example.coroutinedemo D/taosi: error:kotlinx.coroutines.JobCancellationException: StandaloneCoroutine was cancelled; job=StandaloneCoroutine&amp;#123;Cancelling&amp;#125;@&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;d02564&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;05.402&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;24104&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;24168&lt;/span&gt;/com.example.coroutinedemo D/taosi: cancel:&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;05.402&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;24104&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;24168&lt;/span&gt;/com.example.coroutinedemo D/taosi: error:kotlinx.coroutines.JobCancellationException: StandaloneCoroutine was cancelled; job=StandaloneCoroutine&amp;#123;Cancelling&amp;#125;@&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;d02564&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个段代码基本与上面一致唯一的区别是在循环体中我调用了一个系统提供的&lt;code&gt;suspend&lt;/code&gt;函数并且用用try{}catch将其捕获，观看结果可以看到我捕获了一个异常,由于将异常捕获协程体依然会运行下去。当把捕获异常的代码删掉时，协程体就会停止执行。也就是说协程的停止实际上是通过抛出特别的异常（&lt;code&gt; JobCancellationException&lt;/code&gt;）来进行的，也就是说如果协程体的代码不依赖协程的cancel状态（即没有报错），则协程的取消 对协程体的执行一般没什么影响。&lt;/p&gt;
&lt;h4 id=&#34;七、挂起与阻塞的区别&#34;&gt;&lt;a href=&#34;#七、挂起与阻塞的区别&#34; class=&#34;headerlink&#34; title=&#34;七、挂起与阻塞的区别&#34;&gt;&lt;/a&gt;七、挂起与阻塞的区别&lt;/h4&gt;&lt;p&gt;​    先看看以下代码：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; context1 = newSingleThreadContext(&lt;span class=&#34;string&#34;&gt;&amp;quot;custom_Thread1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;onCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(savedInstanceState: &lt;span class=&#34;type&#34;&gt;Bundle&lt;/span&gt;?)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    confirmBlockAndSuspend()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;confirmBlockAndSuspend&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CoroutineScope(Dispatchers.Main).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;main::执行协程1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            test1()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CoroutineScope(Dispatchers.Main).launch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;main::执行协程2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            test2()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;suspend&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        withContext(context1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;1::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;suspend&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        withContext(context1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sleep(&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;2::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt; confirmBlockAndSuspend()&lt;/code&gt;函数中，我们开启了两个协程，一个协程执行&lt;code&gt;test1()&lt;/code&gt;,另一个协程执行&lt;code&gt;test2()&lt;/code&gt;,&lt;code&gt;test1()&lt;/code&gt;和&lt;code&gt;test2()&lt;/code&gt;执行在同一个上下文环境中，即执行在同一个线程中。&lt;code&gt;test1()&lt;/code&gt;中我们阻塞线程1000ms然后打印,&lt;code&gt;test2()&lt;/code&gt;我们阻塞线程200ms然后打印。让我们来看一下结果：&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;08.672&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25786&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;25786&lt;/span&gt;/? D/taosi: main::执行协程&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;08.674&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25786&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;25786&lt;/span&gt;/? D/taosi: main::执行协程&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;09.675&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25786&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;25857&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;::&lt;span class=&#34;number&#34;&gt;37028&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;09.876&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25786&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;25857&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;::&lt;span class=&#34;number&#34;&gt;37028&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;根据结果我们不难得出一个结论，阻塞一个线程，会让线程陷入等待，哪怕这个线程并没有干任何事情。这样对于资源上来讲是一种极大的浪费。&lt;/p&gt;
&lt;p&gt;现在我们用&lt;code&gt;delay()&lt;/code&gt;替换&lt;code&gt;sleep()&lt;/code&gt;，看看如果采用挂起的方式，是否会让这个空闲的线程得到利用&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;suspend&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    withContext(context1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delay(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;1::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;suspend&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    withContext(context1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delay(&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.d(&lt;span class=&#34;string&#34;&gt;&amp;quot;taosi&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;2::&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Thread.currentThread().id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;04&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;39.210&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;26277&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;26277&lt;/span&gt;/? D/taosi: main::执行协程&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;04&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;39.213&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;26277&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;26277&lt;/span&gt;/? D/taosi: main::执行协程&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;04&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;39.417&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;26277&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;26351&lt;/span&gt;/? D/taosi: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;::&lt;span class=&#34;number&#34;&gt;37043&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2020&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;06&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;04&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;40.215&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;26277&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;26351&lt;/span&gt;/com.example.coroutinedemo D/taosi: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;::&lt;span class=&#34;number&#34;&gt;37043&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;从结果上看，2执行在1前面，挂起并不会阻塞当前的线程，而更像是把挂起之后的代码从当前线程中抽离出来，等待挂起函数执行完毕之后，再将代码post回之前的线程。&lt;/p&gt;
&lt;p&gt;从表面上看协程的挂起机制并不会给我们带来上面性能上的提升，因为一般情况下我们都是在一个协程中将我们想要的事情办完。然而从另一个层面上看，协程确实会提升线程调度的性能，考虑这样一种情况，我们短时间内开了大量协程来帮助我们完成一些任务，这些任务的完成都是需要等待却又不需要消耗cpu的计算资源的，假设我们将所有这些启动的协程的上下文都指定为&lt;code&gt;Dispatchers.IO&lt;/code&gt;,这时挂起的优势就体现出来了，当我们开启第一个协程执行任务时，它开始将自己挂起，然后释放掉对线程的控制权，那么后来开启的线程就能使用之前的已经在线程池的线程而不需要自己再重新的去创建一个线程。&lt;/p&gt;
</content>
        <updated>2020-09-03T16:44:20.075Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/09/04/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="http://example.com/2020/09/04/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
        <updated>2020-09-03T16:10:50.955Z</updated>
    </entry>
</feed>
